import React, { useState, useEffect } from 'react';
import { MapPin, Calendar, Clock, RefreshCcw } from 'lucide-react';
import './TicketBookingApp.css'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSS

interface TicketData {
  id: number;
  used: boolean;
  type: string;
  event: string;
  date: string;
  time: string;
  location: string;
  price: number;
}

const initialTickets: TicketData[] = [
  { id: 1, used: false, type: '‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', event: '‡∏û‡∏≤‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏π‡∏ó‡∏∞', date: '25 ‡∏ò.‡∏Ñ. 2567', time: '19:00', location: '‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏°‡∏π‡∏ó‡∏∞', price: 500 },
  { id: 2, used: false, type: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', event: '‡∏ô‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏á 1 ‡∏ß‡∏±‡∏ô', date: '30 ‡∏ò.‡∏Ñ. 2567', time: '20:00', location: '‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', price: 1000 },
  { id: 3, used: false, type: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', event: '‡∏ô‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏±‡∏ô', date: '15 ‡∏°.‡∏Ñ. 2568', time: '18:30', location: '‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', price: 3000 },
  { id: 4, used: false, type: '‡∏ï‡∏≤‡∏°‡πÉ‡∏à', event: '‡∏ï‡∏≤‡∏°‡πÉ‡∏à 1 ‡∏ß‡∏±‡∏ô', date: '10 ‡∏Å.‡∏û. 2568', time: '19:30', location: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÉ‡∏à', price: 2000 },
  { id: 5, used: false, type: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏á‡∏≠‡∏ô', event: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏á‡∏≠‡∏ô 1 ‡∏ß‡∏±‡∏ô', date: '5 ‡∏°‡∏µ.‡∏Ñ. 2568', time: '20:00', location: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', price: 1500 },
  { id: 6, used: false, type: '‡∏Ñ‡∏¥‡∏î', event: '‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ 1 ‡∏ß‡∏±‡∏ô', date: '20 ‡∏°‡∏µ.‡∏Ñ. 2568', time: '17:00', location: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢', price: 1200 },
];

const TicketBookingApp: React.FC = () => {
  const [tickets, setTickets] = useState<TicketData[]>(() => {
    const savedTickets = localStorage.getItem('tickets');
    return savedTickets ? JSON.parse(savedTickets) : initialTickets;
  });

  useEffect(() => {
    localStorage.setItem('tickets', JSON.stringify(tickets));
  }, [tickets]);

  const handleTicketUse = (ticketId: number) => {
    setTickets(prevTickets =>
      prevTickets.map(ticket => (ticket.id === ticketId ? { ...ticket, used: true } : ticket))
    );
  };

  const handleResetTickets = () => {
    setTickets(initialTickets);
    localStorage.removeItem('tickets');
  };

  const renderTicketIcon = (type: string) => {
    switch (type) {
      case '‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£':
        return 'üçΩÔ∏è';
      case '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£':
        return 'üíÜ';
      case '‡∏ï‡∏≤‡∏°‡πÉ‡∏à':
        return 'ü´£';
      case '‡∏Ñ‡∏¥‡∏î':
        return 'ü§î';
      default:
        return 'üé´';
    }
  };

  return (
    <div className="ticket-container">
      <div className="ticket-header">
        <h1>‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
        <button onClick={handleResetTickets}>
          <RefreshCcw />
          ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        </button>
      </div>

      <div className="ticket-grid">
        {tickets.map(ticket => (
          <div
            key={ticket.id}
            className={`ticket ${ticket.used ? 'used' : ''}`}
            onClick={() => !ticket.used && handleTicketUse(ticket.id)}
          >
            <div className="ticket-icon">
              <span>{renderTicketIcon(ticket.type)}</span>
            </div>

            <div className="ticket-details">
              <h2>{ticket.event}</h2>
              <div className="info">
                <Calendar />
                <span>{ticket.date}</span>
              </div>
              <div className="info">
                <Clock />
                <span>{ticket.time} ‡∏ô.</span>
              </div>
              <div className="info">
                <MapPin />
                <span>{ticket.location}</span>
              </div>
              <div className="mt-4 flex justify-between items-center">
                <span className="price">{ticket.price} ‡∏ø</span>
                {ticket.used && <span className="used-badge">‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß</span>}
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="ticket-footer">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {tickets.filter(ticket => !ticket.used).length} ‡∏ï‡∏±‡πã‡∏ß</div>
    </div>
  );
};

export default TicketBookingApp;
